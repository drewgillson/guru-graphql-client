{"version":3,"sources":["logo.svg","components/Row.js","components/Card.js","components/CardList.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Text","styled","div","_templateObject","GreenText","_templateObject2","RedText","_templateObject3","Notes","_templateObject4","Row","_ref","_this","name","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","handleChange","state","textClicks","setState","props","e","value","target","text","react_default","a","createElement","dangerouslySetInnerHTML","__html","replace","notes","onChange","cols","rows","onClick","key","index","aria-label","role","React","Component","Div","Card_templateObject","Container","Card_templateObject2","Title","Card_templateObject3","Remove","Card_templateObject4","Card","card","isHidden","isRemoved","toggleHidden","remove","alt","type","readOnly","checked","title","map","components_Row","UserQuery","gql","CardList_templateObject","graphql","options","variables","pollInterval","_ref$data","data","loading","error","cards","message","components_Card","client","ApolloClient","link","HttpLink","uri","process","cache","InMemoryCache","App","react_apollo_browser_umd","className","src","logo","components_CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.76b9cecf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c35b2089.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Text = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n  font-size: 14px;\n  line-height: 20px;\n`;\n\nconst GreenText = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  background-color: #90EE90;\n  padding: 15px 15px;\n  font-size: 14px;\n  line-height: 20px;\n`;\n\nconst RedText = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  background-color: #F08080;\n  padding: 15px 15px;\n  font-size: 14px;\n  line-height: 20px;\n`;\n\nconst Notes = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n`\n\nclass Row extends React.Component {\n\n    constructor({name}) {\n      super();\n      this.name = name;\n      this.handleClick = this.handleClick.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {textClicks: 0};\n    }\n\n    handleClick() {\n        this.setState((state, props) => ({\n            textClicks: state.textClicks + 1\n        }));\n        if (this.state.textClicks>=2) {\n            this.setState((state, props) => ({\n                textClicks: 0\n            }));\n        }\n    }\n\n    handleChange(e) {\n        this.setState({value: e.target.value});\n    }\n    \n    render() {\n        let LookMLWords = /\\b(access_filter|sql_always_where|required_access_grants|no-report-backend-errors|datagroup_trigger|\\._in_query|system__activity|i__looker|_dialect\\._name|\\$\\{TABLE\\}\\.column|persist_for|label|view_label|group_label|description|value_format|named_value_format|sql_trigger_value)/gi\n        let styledLookMLWords = '<span class=\"lookml\">$1</span>';\n      \n        let ports = /\\b(1551|61616|22|443|587|9000|19999|9999)/gi\n        let styledPorts = '<span class=\"port\">$1</span>'\n      \n        let specialWords = /\\b(mysql_secure_installation|utf8mb4_general_ci|utf8mb4)/gi\n        let styledSpecialWords = '<span class=\"special\">$1</span>'\n    \n        const textClicks = this.state.textClicks;\n        let text = <span dangerouslySetInnerHTML={{__html: this.name.text\n            .replace(LookMLWords, styledLookMLWords)\n            .replace(ports, styledPorts)\n            .replace(specialWords, styledSpecialWords)}}></span>\n\n        let notes = <Notes><textarea onChange={this.handleChange} value={this.state.value} cols=\"90\" rows=\"3\"/></Notes>\n        \n        if (textClicks===0) {\n            return (\n                <Text onClick={this.handleClick} key={this.name.index}>\n                {text}\n                </Text>\n            );\n        } else if (textClicks===1) {\n            return (\n                <div>\n                    <GreenText onClick={this.handleClick} key={this.name.index}>\n                        <span aria-label=\"yes\" role=\"img\">üëç</span>{text}\n                    </GreenText>\n                    {notes}\n                </div>\n            );    \n        } else if (textClicks===2) {\n            return (\n                <div>\n                    <RedText onClick={this.handleClick} key={this.name.index}>\n                        <span aria-label=\"no\" role=\"img\">üëé</span>{text}\n                    </RedText>\n                    {notes}\n                </div>\n            );    \n        }\n    }\n}\n\nRow.propTypes = {\n    name: PropTypes.any.isRequired, // eslint-disable-line\n};\n  \nexport default Row;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Row from './Row';\n\nconst Div = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst Container = styled.div`\n  margin: auto;\n  width: 600px;\n  max-width: 100%;\n  text-align: left;\n  background-color: #ffffff;\n  border-radius: 2px;\n  box-shadow: 0px 1px 1px 0 rgba(0, 0, 0, 0.3);\n`;\n\nconst Title = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst Remove = styled.div`\n  padding: 15px 15px;\n  float: right;\n  cursor: pointer;\n  color: #ddd;\n`\n\nclass Card extends React.Component {\n\n  constructor({card}) {\n    super();\n    this.card = card;\n    this.state = {\n      isHidden: true,\n      isRemoved: false,\n    }\n    this.toggleHidden = this.toggleHidden.bind(this);\n    this.remove = this.remove.bind(this);\n  }\n\n  toggleHidden () {\n    this.setState({\n      isHidden: !this.state.isHidden\n    })\n  }\n\n  remove() {\n    this.setState({\n      isRemoved: true,\n      isHidden: true\n    })\n  }\n  \n  render() {\n    if (!this.state.isHidden) {\n      return (\n        <Div>\n          <Container>\n            <Title onClick={this.toggleHidden}><input type=\"checkbox\" readOnly checked={!this.state.isHidden}/> {this.card.title}</Title>\n            {this.card.rows.map((name, index) => (\n              <Row key={index} name={name}/>\n            ))}\n          </Container>\n        </Div>\n      );\n    }\n    else if (!this.state.isRemoved) {\n      return (\n        <Div>\n          <Container>\n            <Remove onClick={this.remove} alt=\"Remove\">x</Remove>\n            <Title onClick={this.toggleHidden}><input type=\"checkbox\" readOnly checked={!this.state.isHidden}/> {this.card.title}</Title>\n          </Container>\n        </Div>\n      );\n    }\n    else {\n      return (\n        <Div></Div>\n      )\n    }\n  }\n}\n\nCard.propTypes = {\n  card: PropTypes.any.isRequired, // eslint-disable-line\n};\n\nexport default Card;","import React from 'react';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\n\nconst CardList = ({ data: { loading, error, cards } }) => {\n  if (loading) {\n    return <p>Loading ...</p>;\n  }\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  return (\n    <div>\n        {cards.map((name, index) => (\n          <Card key={index} card={name} />\n        ))}\n    </div>\n  );\n};\n\nCardList.propTypes = {\n  data: PropTypes.any.isRequired, // eslint-disable-line\n};\n\nexport const UserQuery = gql`\n  query UserQuery {\n    cards (id:[\"TkEzzk6c\"\n              ,\"TbXzz78c\"\n              ,\"ckEzzkki\"\n              ,\"c5KnnjRi\"\n              ,\"iqKnn74T\"\n              ,\"ioEzzokT\"\n              ,\"ikEzzkeT\"\n              ,\"cAB66Egi\"\n              ,\"TqKnnjnc\"\n              ,\"ceXzzbRi\"\n              ,\"T5KnzGqc\"\n              ,\"c8e5bg7i\"\n              ,\"iGB6RkXT\"\n              ,\"TXrjjBpc\"]) {\n      title\n      rows {\n        rowId\n        text\n      }\n      statusCode\n    }\n  }\n`;\n\nexport default graphql(UserQuery, {\n  options: () => ({\n    variables: {\n    },\n    pollInterval: 10000,\n  }),\n})(CardList);\n","import React, { Component } from 'react';\nimport CardList from './components/CardList';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_ENDPOINT }),\n  cache: new InMemoryCache(),\n});\n\n/* fetch data from graphQL server and print on console */\n//client.query({ query: gql`{ hello }` }).then(console.log);\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h2>Checklists for Best Practices</h2>\n          </div>\n          <div className=\"App-User\">\n            <CardList />\n          </div>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (!isLocalhost) {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        } else {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'reset-css/reset.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}