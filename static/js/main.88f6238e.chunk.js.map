{"version":3,"sources":["components/Row.js","components/Card.js","components/CardList.js","components/ActionButtons.js","App.js","index.js"],"names":["Text","styled","div","Score0","span","Score1","Score2","Score3","Score4","NotApplicableText","Notes","Row","React","Component","constructor","props","super","this","idx","name","card","updateScore","handleClick","bind","handleChange","state","clicks","ls","get","text","value","score","window","jsonForGoogleApps","rows","e","el","target","key","getAttribute","parentElement","hasOwnProperty","exists","existingNote","notes","remove","obj","setState","set","previousElementSibling","render","dangerouslySetInnerHTML","__html","replace","aria-label","role","onChange","cols","data-text","onClick","index","Div","Container","Title","Remove","Score","Super","Card","isHidden","title","isRemoved","rowScores","totalScore","toggleHidden","addScores","hiddenState","a","b","Number","componentDidMount","newScores","Object","assign","scoreSum","values","reduce","score_percent","Math","round","length","alt","type","readOnly","checked","map","Tip","CardList","reviewType","event","forceUpdate","query","UserQuery","loading","error","data","message","cards","includedCards","filter","arr","indexOf","htmlFor","id","gql","graphql","options","variables","pollInterval","Clear","ActionButtons","save","clear","confirm","localStorage","location","reload","dispatchChange","i","dispatchEvent","Event","bubbles","cancelable","document","getElementById","setTimeout","console","log","JSON","stringify","customer","prompt","fetch","mode","headers","method","body","then","response","rel","href","client","ApolloClient","link","HttpLink","uri","process","cache","InMemoryCache","App","className","src","ReactDOM"],"mappings":"0hDAKA,MAAMA,EAAOC,IAAOC,IAAV,KAOJC,EAASF,IAAOG,KAAV,KAMNC,EAASJ,IAAOG,KAAV,KAMNE,EAASL,IAAOG,KAAV,KAMNG,EAASN,IAAOG,KAAV,KAMNI,EAASP,IAAOG,KAAV,KAMNK,EAAoBR,IAAOC,IAAV,KASjBQ,EAAQT,IAAOC,IAAV,KAKX,MAAMS,UAAYC,IAAMC,UAEpBC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,IAAMD,KAAKF,MAAMG,IACtBD,KAAKE,KAAOF,KAAKF,MAAMI,KACvBF,KAAKG,KAAOH,KAAKF,MAAMK,KACvBH,KAAKI,YAAcJ,KAAKF,MAAMM,YAC9BJ,KAAKK,YAAcL,KAAKK,YAAYC,KAAKN,MACzCA,KAAKO,aAAeP,KAAKO,aAAaD,KAAKN,MAC3CA,KAAKQ,MAAQ,CACTC,OAAQC,IAAGC,IAAIX,KAAKE,KAAKU,KAAO,YAAc,EAC9CC,MAAOH,IAAGC,IAAIX,KAAKE,KAAKU,KAAO,WAAa,GAC5CE,MAAOd,KAAKF,MAAMgB,OAIjBC,OAAOC,kBAAP,MAAkChB,KAAKG,QACxCY,OAAOC,kBAAP,MAAkChB,KAAKG,MAAQ,CAACc,KAAM,KAEf,OAAvCP,IAAGC,IAAIX,KAAKE,KAAKU,KAAO,aACxBG,OAAOC,kBAAP,MAAkChB,KAAKG,MAAMc,KAAKjB,KAAKE,KAAKU,MAAQ,CAAC,MAASF,IAAGC,IAAIX,KAAKE,KAAKU,KAAO,UAAWE,MAAQJ,IAAGC,IAAIX,KAAKE,KAAKU,KAAO,WAAW,IAIlKP,YAAYa,GACR,IAAIJ,EAAQd,KAAKQ,MAAMC,OAGnBU,EAAKD,EAAEE,OAIX,IAAK,IAAIC,KAHJF,EAAGG,aAAa,eACjBH,EAAKD,EAAEE,OAAOG,eAEFR,OAAOC,kBAAP,MACZ,GAAID,OAAOC,kBAAP,MAAkCQ,eAAeH,IAAQA,IAAQrB,KAAKG,KAAM,CAC5E,IAAIsB,GAAS,EACTC,EAAe,GACfX,OAAOC,kBAAP,MAAkCK,GAAKJ,KAAKE,EAAGG,aAAa,gBAC5DI,EAAeX,OAAOC,kBAAP,MAAkCK,GAAKJ,KAAKE,EAAGG,aAAa,cAAcK,OAE7FZ,OAAOC,kBAAP,MAAkCK,GAAKJ,KAAKE,EAAGG,aAAa,cAAgB,CAAC,MAASI,EAAcZ,MAAOA,GACvGA,EAAQ,WACDC,OAAOC,kBAAP,MAAkCK,GAAKJ,KAAKE,EAAGG,aAAa,cACnEZ,IAAGkB,OAAO5B,KAAKE,KAAKU,KAAO,YAE/B,MAGR,IAAKa,EAAQ,CACT,IAAII,EAAM,GACVA,EAAIV,EAAGG,aAAa,cAAgB,CAAC,MAAS,GAAIR,MAAOA,GACzDC,OAAOC,kBAAP,MAAkChB,KAAKG,MAAQ,CAACc,KAAMY,GAQ1D,GAJA7B,KAAK8B,SAAS,CAACtB,EAAOV,KAAR,CACVW,OAAQK,KAGRA,GAAO,EAAG,CACV,IAAIA,EAAQ,EACZd,KAAKF,MAAMM,YAAYU,EAAMd,KAAKC,KAClCD,KAAK8B,SAAS,CAACtB,EAAOV,KAAR,CACVW,OAAQK,KAEZJ,IAAGqB,IAAI/B,KAAKE,KAAKU,KAAO,UAAU,QAG7BE,GAAS,GAAKA,GAAS,GAC5Bd,KAAKF,MAAMM,YAAYU,EAAMd,KAAKC,KAGtCa,EAAQd,KAAKQ,MAAMC,OAAS,EAC5BC,IAAGqB,IAAI/B,KAAKE,KAAKU,KAAO,UAAUE,GAGtCP,aAAaW,GACTlB,KAAK8B,SAAS,CAACjB,MAAOK,EAAEE,OAAOP,QAC/BH,IAAGqB,IAAI/B,KAAKE,KAAKU,KAAO,SAASM,EAAEE,OAAOP,OAC1C,IAAIM,EAAKD,EAAEE,OAAOG,cAAcS,uBAChC,IAAK,IAAIX,KAAON,OAAOC,kBAAP,MACZ,GAAID,OAAOC,kBAAP,MAAkCQ,eAAeH,IAAQA,IAAQrB,KAAKG,KAAM,CAC5EY,OAAOC,kBAAP,MAAkCK,GAAKJ,KAAKE,EAAGG,aAAa,cAAcK,MAAQT,EAAEE,OAAOP,MAC3F,OAKZoB,SAII,MAAMxB,EAAST,KAAKQ,MAAMC,OAC1B,IAAIK,EAAQ,GACRa,EAAQ,GACRf,EAAO,0BAAMsB,wBAAyB,CAACC,OAAQnC,KAAKE,KAAKU,KACxDwB,QAPe,4BACJ,0CAQhB,OAAQ3B,GACJ,KAAK,EACDK,EAAQ,kBAAC5B,EAAD,KAAQ,0BAAMmD,aAAW,MAAMC,KAAK,OAA5B,sBACpB,MACA,KAAK,EACDxB,EAAQ,kBAAC1B,EAAD,KAAQ,0BAAMiD,aAAW,KAAKC,KAAK,OAA3B,sBACpB,MACA,KAAK,EACDxB,EAAQ,kBAACzB,EAAD,KAAQ,0BAAMgD,aAAW,KAAKC,KAAK,OAA3B,sBACpB,MACA,KAAK,EACDxB,EAAQ,kBAACxB,EAAD,KAAQ,0BAAM+C,aAAW,KAAKC,KAAK,OAA3B,sBACpB,MACA,KAAK,EACDxB,EAAQ,kBAACvB,EAAD,KAAQ,0BAAM8C,aAAW,KAAKC,KAAK,OAA3B,sBASxB,OAJI7B,GAAU,IACVkB,EAAQ,kBAAClC,EAAD,KAAO,8BAAU8C,SAAUvC,KAAKO,aAAcM,MAAOb,KAAKQ,MAAMK,MAAO2B,KAAK,KAAKvB,KAAK,QAG9FR,GAAU,EAEN,6BACI,kBAAC1B,EAAD,CAAM0D,YAAWzC,KAAKE,KAAKU,KAAM8B,QAAS1C,KAAKK,YAAagB,IAAKrB,KAAKE,KAAKyC,OAC1E7B,EADD,IACSF,GAERe,GAKL,6BACI,kBAACnC,EAAD,CAAmBiD,YAAWzC,KAAKE,KAAKU,KAAM8B,QAAS1C,KAAKK,YAAagB,IAAKrB,KAAKE,KAAKyC,OACnF/B,GAEJe,IAWNjC,Q,06BCrMf,MAAMkD,EAAM5D,IAAOC,IAAV,KAKH4D,EAAY7D,IAAOC,IAAV,KAUT6D,EAAQ9D,IAAOC,IAAV,KAOL8D,EAAS/D,IAAOC,IAAV,KAON+D,EAAQhE,IAAOC,IAAV,KAKLgE,EAAQjE,IAAOG,KAAV,KAMX,MAAM+D,UAAavD,IAAMC,UAEvBC,aAAY,KAACM,IACXJ,QACAC,KAAKG,KAAOA,EACZH,KAAKQ,MAAQ,CACX2C,SAAoD,MAAzCzC,IAAGC,IAAIX,KAAKG,KAAKiD,MAAQ,cAA8B1C,IAAGC,IAAIX,KAAKG,KAAKiD,MAAQ,aAC3FC,WAAW,EACXC,UAAW5C,IAAGC,IAAIX,KAAKG,KAAKiD,MAAQ,eAAiB,GACrDG,WAAY7C,IAAGC,IAAIX,KAAKG,KAAKiD,MAAQ,iBAAmB,GAE1DpD,KAAKwD,aAAexD,KAAKwD,aAAalD,KAAKN,MAC3CA,KAAK4B,OAAS5B,KAAK4B,OAAOtB,KAAKN,MAC/BA,KAAKyD,UAAYzD,KAAKyD,UAAUnD,KAAKN,MACrCA,KAAKI,YAAcJ,KAAKI,YAAYE,KAAKN,MAG3CwD,eACE,MAAME,GAAe1D,KAAKQ,MAAM2C,SAChCnD,KAAK8B,SAAS,CACZqB,SAAUO,IAEZhD,IAAGqB,IAAI/B,KAAKG,KAAKiD,MAAQ,YAAYM,GAGvC9B,SACE5B,KAAK8B,SAAS,CACZuB,WAAW,EACXF,UAAU,IAIdM,UAAUE,EAAEC,GACV,OAAOC,OAAOF,GAAKE,OAAOD,GAG5BE,oBACE9D,KAAK8B,SAAS,CACZyB,WAAY7C,IAAGC,IAAIX,KAAKG,KAAKiD,MAAQ,iBAIzChD,YAAaS,EAAOZ,GAClB,IAAI8D,EAAYC,OAAOC,OAAO,GAAIjE,KAAKQ,MAAM8C,WAC7CS,EAAU9D,GAAOY,EACjB,MAAMqD,EAAWF,OAAOG,OAAOJ,GAAWK,OAAOpE,KAAKyD,UAAW,GACjEzD,KAAK8B,SAAS,CACZwB,UAAWS,EACXR,WAAYW,IAEdxD,IAAGqB,IAAI/B,KAAKG,KAAKiD,MAAQ,aAAaW,GACtCrD,IAAGqB,IAAI/B,KAAKG,KAAKiD,MAAQ,cAAcc,GAGzCjC,SACE,IAAImB,EAAQpD,KAAKG,KAAKiD,MAClBiB,EAAgBC,KAAKC,MAAMvE,KAAKQ,MAAM+C,YAAsC,EAAxBvD,KAAKG,KAAKc,KAAKuD,QAAY,KACnF,OAAKxE,KAAKQ,MAAM2C,SAYNnD,KAAKQ,MAAM6C,UAYjB,kBAACT,EAAD,MAVA,kBAACA,EAAD,KACE,kBAACC,EAAD,KACE,kBAACE,EAAD,CAAQL,QAAS1C,KAAK4B,OAAQ6C,IAAI,UAAlC,KACA,kBAAC3B,EAAD,CAAOJ,QAAS1C,KAAKwD,cAAc,2BAAOkB,KAAK,WAAWC,UAAQ,EAACC,SAAU5E,KAAKQ,MAAM2C,WAAxF,IAAqGC,KAfzG,kBAACR,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAOJ,QAAS1C,KAAKwD,cAAc,2BAAOkB,KAAK,WAAWC,UAAQ,EAACC,SAAU5E,KAAKQ,MAAM2C,WAAxF,IAAqGC,EAArG,IAA4G,kBAACJ,EAAD,KAAQqB,EAAR,KAAwB,kBAACpB,EAAD,SAASjD,KAAKQ,MAAM+C,WAApB,IAAyD,EAAxBvD,KAAKG,KAAKc,KAAKuD,OAAhD,OACnIxE,KAAKG,KAAKc,KAAK4D,IAAI,CAAC3E,EAAMyC,IACzB,kBAAC,EAAD,CAAKtB,IAAKsB,EAAOxC,KAAMiD,EAAOlD,KAAMA,EAAMY,MAAOd,KAAKQ,MAAM8C,UAAUX,GAAQ1C,IAAK0C,EAAOvC,YAAaJ,KAAKI,kBA4B3G8C,Q,4mCChIf,MAAM4B,EAAM9F,IAAOG,KAAV,KAIT,MAAM4F,UAAiBpF,IAAMC,UAE3BC,YAAYC,GACVC,MAAMD,GACNE,KAAKQ,MAAQ,CAACwE,WAAqC,MAAxBtE,IAAGC,IAAI,cAAwB,SAAWD,IAAGC,IAAI,eAC5EX,KAAKO,aAAeP,KAAKO,aAAaD,KAAKN,MAG7CO,aAAa0E,GACXjF,KAAK8B,SAAS,CAACkD,WAAYC,EAAM7D,OAAOP,QACxCH,IAAGqB,IAAI,aAAckD,EAAM7D,OAAOP,OAClCb,KAAKkF,cAGPjD,SACE,OACE,kBAAC,IAAD,CAAOkD,MAAOC,GACb,EAAGC,UAASC,QAAOC,WAElB,GAAIF,EACF,OAAO,6BAAK,mCAAa,yDAAiC,oCAE5D,GAAIC,EACF,OAAO,2BAAIA,EAAME,SAGnB,IAAIC,EAAQF,EAAKE,MACbC,EAAgB,GAEpB,OAAQ1F,KAAKQ,MAAMwE,YACjB,IAAK,KACHU,EAAgB,CAAC,gEACnB,MACA,IAAK,MACHA,EAAgB,CAAC,2BACnB,MACA,IAAK,SACHA,EAAgB,CAAC,oCACA,QACA,WACA,SACA,WACA,cACA,WACA,uBACA,iBACnB,MACA,IAAK,eACHA,EAAgB,CAAC,mCACA,oCACA,cACnB,MACA,IAAK,cACHA,EAAgB,CAAC,kBACA,qBACA,sBASrB,OAJAD,EAAQA,EAAME,QAAO,SAASxF,EAAMwC,EAAOiD,GACzC,OAA+C,IAAvCF,EAAcG,QAAQ1F,EAAKiD,UAInC,6BAAK,mCACH,2BAAO0C,QAAQ,cAAf,YACA,4BAAQC,GAAG,aAAalF,MAAOb,KAAKQ,MAAMwE,WAAYzC,SAAUvC,KAAKO,cACnE,4BAAQM,MAAM,MAAd,oBACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,gBAAd,2BACA,4BAAQA,MAAM,eAAd,gBACA,4BAAQA,MAAM,OAAd,QAPJ,IAQY,kBAACiE,EAAD,0EACV,mCACA,6BACKW,EAAMZ,IAAI,CAAC1E,EAAMwC,IAChB,kBAAC,EAAD,CAAMtB,IAAKlB,EAAKiD,MAAOjD,KAAMA,MAGnC,uCAaL,MAAMiF,EAAYY,IAAH,KAkCPC,kBAAQb,EAAW,CAChCc,QAAS,MACPC,UAAW,GAEXC,aAAc,OAJHH,CAMZlB,G,iGC/IH,MAAMsB,EAAQrH,IAAOG,KAAV,KAIX,MAAMmH,WAAsB3G,IAAMC,UAEhCC,cACEE,QACAC,KAAKuG,KAAOvG,KAAKuG,KAAKjG,KAAKN,MAG7BwG,QACMzF,OAAO0F,QAAQ,0CACjBC,aAAaF,QACbzF,OAAO4F,SAASC,UAIpBC,eAAe7B,EAAY8B,GACzB9B,EAAWnE,MAAQmE,EAAWkB,QAAQY,GAAGjG,MACzCmE,EAAW+B,cAAc,IAAIC,MAAM,SAAU,CAAEC,SAAS,EAAMC,YAAY,KAG5EX,OAEE,IAAIvB,EAAajE,OAAOoG,SAASC,eAAe,cAEhD,IAAK,IAAIN,EAAI,EAAGA,EAAI9B,EAAWkB,QAAQ1B,OAAQsC,IAG7C/F,OAAOsG,WAAWrH,KAAK6G,eAAevG,KAAK,KAAM0E,EAAY8B,GAJnD,IAI+DA,GAG3E/F,OAAOsG,YAAW,WAChBC,QAAQC,IAAIC,KAAKC,UAAU1G,OAAOC,oBAClCD,OAAOC,kBAAkB0G,SAAWC,OAAO,wBAG3CC,MAD4B,sGACC,CACzBC,KAAM,UACNC,QAAS,CACL,8BAA8B,KAElCC,OAAQ,OACRC,KAAMR,KAAKC,UAAU1G,OAAOC,qBAC7BiH,MAAK,SAASC,GACbZ,QAAQC,IAAIW,GACRnH,OAAO0F,QAAQ,0EACjBC,aAAaF,QACbzF,OAAO4F,SAASC,eAvBZ,IA0BT5B,EAAWkB,QAAQ1B,QAGxBvC,SACE,OACI,6BACI,2BAAOyC,KAAK,SAAShC,QAAS1C,KAAKuG,KAAM1F,MAAM,uBADnD,WAEI,uBAAGO,OAAO,SAAS+G,IAAI,sBAAsBC,KAAK,gFAAlD,sBACA,kBAAC/B,EAAD,KAAO,2BAAO3B,KAAK,SAAShC,QAAS1C,KAAKwG,MAAO3F,MAAM,WACvD,qCAMGyF,U,mCC5Df,MAAM+B,GAAS,IAAIC,KAAa,CAC9BC,KAAM,IAAIC,KAAS,CAAEC,IAAKC,uEAC1BC,MAAO,IAAIC,OAGb,MAAMC,WAAYjJ,YAChBqC,SACE,OACE,kBAAC,IAAD,CAAgBoG,OAAQA,IACtB,yBAAKS,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKC,IAAI,02xBAA02xBD,UAAU,WAAWrE,IAAI,SAC54xB,4BACE,yBAAKqE,UAAU,WAAf,cAAoC,0BAAMA,UAAU,eAAhB,eAA0C,0BAAMA,UAAU,aAAhB,KAA1C,aAAwF,0BAAMA,UAAU,aAAhB,KAAxF,cAAuI,0BAAMA,UAAU,aAAhB,KAAvI,uFADtC,8DAE+D,6BAF/D,uCAEwG,uBAAG1H,OAAO,SAAS+G,IAAI,sBAAsBC,KAAK,uDAAlD,cAFxG,eAEgP,0BAAMU,UAAU,WAAhB,YAElP,yBAAKA,UAAU,YACb,kBAAC,EAAD,OAEF,kBAAC,GAAD,SAOKD,UC9Bf9H,OAAOC,kBAAoB,CAAC0G,SAAU,GAAI,MAAS,IACnDsB,IAAS/G,OAAO,kBAAC,GAAD,MAASkF,SAASC,eAAe,W","file":"static/js/main.88f6238e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ls from 'local-storage'\n\nconst Text = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n  font-size: 14px;\n  line-height: 20px;\n`;\n\nconst Score0 = styled.span`\n  border-radius: 25px;\n  background-color: #FF4600;\n  padding: 3px;\n`;\n\nconst Score1 = styled.span`\n  border-radius: 25px;\n  background-color: #FF8C00;\n  padding: 3px;\n`;\n\nconst Score2 = styled.span`\n  border-radius: 25px;\n  background-color: #FFD300;\n  padding: 3px;\n`;\n\nconst Score3 = styled.span`\n  border-radius: 25px;\n  background-color: #E5FF00;\n  padding: 3px;\n`;\n\nconst Score4 = styled.span`\n  border-radius: 25px;\n  background-color: #9FFF00;\n  padding: 3px;\n`;\n\nconst NotApplicableText = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  background-color: #EEE;\n  padding: 15px 15px;\n  font-size: 14px;\n  line-height: 20px;\n  text-decoration: line-through;\n`;\n\nconst Notes = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n`;\n\nclass Row extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.idx = this.props.idx\n      this.name = this.props.name;\n      this.card = this.props.card;\n      this.updateScore = this.props.updateScore;\n      this.handleClick = this.handleClick.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {\n          clicks: ls.get(this.name.text + '_clicks') || 0,\n          value: ls.get(this.name.text + '_notes') || '',\n          score: this.props.score\n        };\n\n      // Populate shadow JSON object on component load with values from localStorage\n      if (!window.jsonForGoogleApps['cards'][this.card]) {\n          window.jsonForGoogleApps['cards'][this.card] = {rows: {}}\n      }\n      if (ls.get(this.name.text + '_clicks') !== null) {\n          window.jsonForGoogleApps['cards'][this.card].rows[this.name.text] = {\"notes\": ls.get(this.name.text + '_notes'), score: (ls.get(this.name.text + '_clicks')-1)};\n      }\n    }\n\n    handleClick(e) {\n        let score = this.state.clicks\n        \n        // Maintain global shadow JSON object based on user input\n        let el = e.target;\n        if (!el.getAttribute('data-text')) {\n            el = e.target.parentElement;\n        }\n        for (var key in window.jsonForGoogleApps['cards']) {\n            if (window.jsonForGoogleApps['cards'].hasOwnProperty(key) && key === this.card) {\n                var exists = true;\n                var existingNote = \"\";\n                if (window.jsonForGoogleApps['cards'][key].rows[el.getAttribute('data-text')]) {\n                    existingNote = window.jsonForGoogleApps['cards'][key].rows[el.getAttribute('data-text')].notes\n                }\n                window.jsonForGoogleApps['cards'][key].rows[el.getAttribute('data-text')] = {\"notes\": existingNote, score: score};\n                if (score > 5) {\n                    delete window.jsonForGoogleApps['cards'][key].rows[el.getAttribute('data-text')]\n                    ls.remove(this.name.text + '_clicks')\n                }\n                break;\n            }\n        }\n        if (!exists) {\n            let obj = {};\n            obj[el.getAttribute('data-text')] = {\"notes\": \"\", score: score};\n            window.jsonForGoogleApps['cards'][this.card] = {rows: obj};\n        }\n\n        // update the colour of the row and save the score:\n        this.setState((state, props) => ({\n            clicks: score\n        }));\n        // roll the state back to the beginning if you click through every state\n        if (score>=6) {\n            let score = 0;\n            this.props.updateScore(score,this.idx)\n            this.setState((state, props) => ({\n                clicks: score\n            }));\n            ls.set(this.name.text + '_clicks',0)\n        }\n        // not all states have scores associated with them\n        else if (score >= 1 && score <= 4) {\n            this.props.updateScore(score,this.idx)\n        }\n\n        score = this.state.clicks + 1\n        ls.set(this.name.text + '_clicks',score)\n    }\n\n    handleChange(e) {\n        this.setState({value: e.target.value});\n        ls.set(this.name.text + '_notes',e.target.value)\n        let el = e.target.parentElement.previousElementSibling;\n        for (var key in window.jsonForGoogleApps['cards']) {\n            if (window.jsonForGoogleApps['cards'].hasOwnProperty(key) && key === this.card) {\n                window.jsonForGoogleApps['cards'][key].rows[el.getAttribute('data-text')].notes = e.target.value;\n                break;\n            }\n        }\n    }\n\n    render() {\n        let markdownLinks = /\\[([^\\]]+)\\]\\(([^)]+)\\)/gi\n        let htmlLinks = '<a target=\"_blank\" href=\"$2\">$1</a>';\n    \n        const clicks = this.state.clicks;\n        let score = \"\"\n        let notes = \"\"\n        let text = <span dangerouslySetInnerHTML={{__html: this.name.text\n            .replace(markdownLinks, htmlLinks)}}></span>\n\n        switch (clicks) {\n            case 1:\n                score = <Score0><span aria-label=\"yes\" role=\"img\">&nbsp;0️⃣</span></Score0>\n            break;\n            case 2:\n                score = <Score1><span aria-label=\"no\" role=\"img\">&nbsp;1️⃣</span></Score1>\n            break;\n            case 3:\n                score = <Score2><span aria-label=\"no\" role=\"img\">&nbsp;2️⃣</span></Score2>\n            break;\n            case 4:\n                score = <Score3><span aria-label=\"no\" role=\"img\">&nbsp;3️⃣</span></Score3>\n            break;\n            case 5:\n                score = <Score4><span aria-label=\"no\" role=\"img\">&nbsp;4️⃣</span></Score4>\n            break;\n            default:\n        }\n\n        if (clicks >= 1) {\n            notes = <Notes><textarea onChange={this.handleChange} value={this.state.value} cols=\"78\" rows=\"3\"/></Notes>\n        }\n\n        if (clicks <= 5) {\n            return (\n                <div>\n                    <Text data-text={this.name.text} onClick={this.handleClick} key={this.name.index}>\n                    {score} {text}\n                    </Text>\n                    {notes}\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <NotApplicableText data-text={this.name.text} onClick={this.handleClick} key={this.name.index}>\n                        {text}\n                    </NotApplicableText>\n                    {notes}\n                </div>\n            );    \n        }\n    }\n}\n\nRow.propTypes = {\n    name: PropTypes.any.isRequired, // eslint-disable-line\n};\n  \nexport default Row;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Row from './Row';\nimport ls from 'local-storage'\n\nconst Div = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst Container = styled.div`\n  margin: auto;\n  width: 600px;\n  max-width: 100%;\n  text-align: left;\n  background-color: #ffffff;\n  border-radius: 2px;\n  box-shadow: 0px 1px 1px 0 rgba(0, 0, 0, 0.3);\n`;\n\nconst Title = styled.div`\n  border-bottom: 1px solid #e6ecf0;\n  padding: 15px 15px;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst Remove = styled.div`\n  padding: 15px 15px;\n  float: right;\n  cursor: pointer;\n  color: #ddd;\n`\n\nconst Score = styled.div`\n  float: right;\n  font-weight: normal;\n`\n\nconst Super = styled.span`\n  font-size: 12px;\n  color: #bbb;\n  padding-left: 10px;\n`\n\nclass Card extends React.Component {\n\n  constructor({card}) {\n    super();\n    this.card = card;\n    this.state = {\n      isHidden: (ls.get(this.card.title + '_isHidden') == null ? true : ls.get(this.card.title + '_isHidden')),\n      isRemoved: false,\n      rowScores: ls.get(this.card.title + '_rowScores') || {},\n      totalScore: ls.get(this.card.title + '_totalScores') || 0\n    }\n    this.toggleHidden = this.toggleHidden.bind(this);\n    this.remove = this.remove.bind(this);\n    this.addScores = this.addScores.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n  }\n\n  toggleHidden () {\n    const hiddenState = !this.state.isHidden\n    this.setState({\n      isHidden: hiddenState\n    })\n    ls.set(this.card.title + '_isHidden',hiddenState)\n  }\n\n  remove() {\n    this.setState({\n      isRemoved: true,\n      isHidden: true\n    })\n  }\n\n  addScores(a,b) {\n    return Number(a) + Number(b)\n  }\n\n  componentDidMount() {\n    this.setState({\n      totalScore: ls.get(this.card.title + '_totalScore'),\n    });\n  }\n\n  updateScore (value, idx) {\n    let newScores = Object.assign({}, this.state.rowScores)\n    newScores[idx] = value\n    const scoreSum = Object.values(newScores).reduce(this.addScores, 0)\n    this.setState({\n      rowScores: newScores,\n      totalScore: scoreSum\n    })\n    ls.set(this.card.title + '_rowScores',newScores)\n    ls.set(this.card.title + '_totalScore',scoreSum)\n  }\n  \n  render() {\n    let title = this.card.title;\n    let score_percent = Math.round(this.state.totalScore / (this.card.rows.length * 4)*100)\n    if (!this.state.isHidden) {\n      return (\n        <Div>\n          <Container>\n            <Title onClick={this.toggleHidden}><input type=\"checkbox\" readOnly checked={!this.state.isHidden}/> {title} <Score>{score_percent}% <Super>({this.state.totalScore}/{this.card.rows.length * 4})</Super></Score></Title>\n            {this.card.rows.map((name, index) => (\n              <Row key={index} card={title} name={name} score={this.state.rowScores[index]} idx={index} updateScore={this.updateScore}></Row>\n            ))}\n          </Container>\n        </Div>\n      );\n    }\n    else if (!this.state.isRemoved) {\n      return (\n        <Div>\n          <Container>\n            <Remove onClick={this.remove} alt=\"Remove\">x</Remove>\n            <Title onClick={this.toggleHidden}><input type=\"checkbox\" readOnly checked={!this.state.isHidden}/> {title}</Title>\n          </Container>\n        </Div>\n      );\n    }\n    else {\n      return (\n        <Div></Div>\n      )\n    }\n  }\n}\n\nCard.propTypes = {\n  card: PropTypes.any.isRequired, // eslint-disable-line\n};\n\nexport default Card;","import React from 'react';\nimport { graphql } from 'react-apollo';\nimport { Query } from 'react-apollo'\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\nimport styled from 'styled-components';\nimport ls from 'local-storage'\n\nconst Tip = styled.span`\n  font-size: 11px;\n`;\n\nclass CardList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {reviewType: (ls.get('reviewType') == null ? 'lookml' : ls.get('reviewType'))};\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({reviewType: event.target.value});\n    ls.set('reviewType', event.target.value)\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <Query query={UserQuery}>\n      {({ loading, error, data }) => {\n\n        if (loading) {\n          return <div><p>&nbsp;</p><p>Loading cards from Guru...</p><p>&nbsp;</p></div>;\n        }\n        if (error) {\n          return <p>{error.message}</p>;\n        }\n\n        let cards = data.cards;\n        let includedCards = [];\n\n        switch (this.state.reviewType) {\n          case 'cs':\n            includedCards = ['Top 10 Behaviors and Characteristics of Successful Customers'];\n          break;\n          case 'pbl':\n            includedCards = ['Client-Side Performance'];\n          break;\n          case 'lookml':\n            includedCards = ['Development Process & Environment',\n                             'Views',\n                             'Explores',\n                             'Models',\n                             'Projects',\n                             'Performance',\n                             'Security',\n                             'Database Connections',\n                             'Data Pipeline'];\n          break;\n          case 'architecture':\n            includedCards = ['Application Servers (On-Premise)',\n                             'Application Database (On-Premise)',\n                             'Monitoring'];\n          break;\n          case 'dataculture':\n            includedCards = ['User Enablement',\n                             'Content Management',\n                             'Release Management']\n          break;\n          default:\n        }\n\n        cards = cards.filter(function(card, index, arr){\n          return (includedCards.indexOf(card.title) !== -1);\n        });\n\n        return (\n          <div><p>&nbsp;</p>\n            <label htmlFor=\"reviewType\">Section:</label>\n            <select id=\"reviewType\" value={this.state.reviewType} onChange={this.handleChange}>\n              <option value=\"cs\">Customer Success</option>\n              <option value=\"lookml\">LookML</option>\n              <option value=\"architecture\">On-Premise Architecture</option>\n              <option value=\"dataculture\">Data Culture</option>\n              <option value=\"pbl\">PBL</option>\n            </select> <Tip>Tip: remove cards you&rsquo;re not interested in by clicking the X</Tip>\n            <p>&nbsp;</p>\n            <div>\n                {cards.map((card, index) => (\n                  <Card key={card.title} card={card} />\n                ))}\n            </div>\n            <p>&nbsp;</p>\n          </div>\n        )\n      }}\n      </Query>\n    )\n  }\n};\n\nCardList.propTypes = {\n  data: PropTypes.any.isRequired, // eslint-disable-line\n};\n\nexport const UserQuery = gql`\n  query UserQuery {\n    cards (id:[\"iqKnn74T\" # Application Servers (On-Premise)\n              ,\"ioEzzokT\" # Application Database (On-Premise)\n              ,\"cAB66Egi\" # Monitoring\n\n              ,\"ceXzzbRi\" # Development Process & Environment\n              ,\"TLKg5Gbc\" # LookML Views\n              ,\"c8e5bg7i\" # LookML Explores\n              ,\"iGB6RkXT\" # LookML Models\n              ,\"T5KnzGqc\" # LookML Projects\n              ,\"ikEzzkeT\" # Performance\n              ,\"ckEzzkki\" # Security\n              ,\"TkEzzk6c\" # Database Connections\n              ,\"TbXzz78c\" # Data Pipeline\n\n              ,\"c5KnnjRi\" # User Enablement\n              ,\"TqKnnjnc\" # Release Management\n              ,\"TXrjjBpc\" # Content Management\n\n              ,\"inEpreBT\" # Customer Success Top 10\n\n              ,\"cbbeybKi\" # Client-Side Performance\n              ]) {\n      title\n      rows {\n        rowId\n        text\n      }\n      statusCode\n    }\n  }\n`;\n\nexport default graphql(UserQuery, {\n  options: () => ({\n    variables: {\n    },\n    pollInterval: 1000000,\n  }),\n})(CardList);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Clear = styled.span`\n  padding-left: 100px;\n`;\n\nclass ActionButtons extends React.Component {\n\n  constructor() {\n    super();\n    this.save = this.save.bind(this);\n  }\n\n  clear() {\n    if (window.confirm(\"Are you sure you want to start over?\")) {\n      localStorage.clear();\n      window.location.reload();\n    }\n  }\n\n  dispatchChange(reviewType, i) {\n    reviewType.value = reviewType.options[i].value\n    reviewType.dispatchEvent(new Event('change', { bubbles: true, cancelable: false}));\n  }\n\n  save() {\n    // Force the shadow JSON object to get built for each section if the user has just refreshed the page\n    let reviewType = window.document.getElementById('reviewType')\n    let pause = 100\n    for (let i = 0; i < reviewType.options.length; i++){\n      // We need to let React have enough time to render the components which will in turn build the JSON object\n      // Advance through the sections one-by-one and pause for 100ms in between:\n      window.setTimeout(this.dispatchChange.bind(null, reviewType, i), pause * i)\n    }\n\n    window.setTimeout(function() {\n      console.log(JSON.stringify(window.jsonForGoogleApps))\n      window.jsonForGoogleApps.customer = prompt(\"Who is the customer?\");\n\n      let googleScriptsEndpoint = 'https://script.google.com/a/looker.com/macros/s/AKfycbzAAHv7EHgJRbZ5f8IqnK3IPqWDlnuUZWZTC-zIfw/exec';\n      fetch(googleScriptsEndpoint, {\n          mode: 'no-cors',\n          headers: {\n              'Access-Control-Allow-Origin':'*'\n          },\n          method: 'post',\n          body: JSON.stringify(window.jsonForGoogleApps)\n      }).then(function(response) {\n          console.log(response)\n          if (window.confirm('All done, check the Transcriber Output folder. Do you want to clear?')) {\n            localStorage.clear();\n            window.location.reload();      \n          }\n      }); \n    }, reviewType.options.length * pause)\n  }\n\n  render() {\n    return (\n        <div>\n            <input type=\"button\" onClick={this.save} value=\"Save to Google Doc\"/>&nbsp;&nbsp;\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://drive.google.com/drive/u/0/folders/1VXtp98I-A8MFdo-wN3iHnYOPYtqh8lTI\">Transcriber Output</a>\n            <Clear><input type=\"button\" onClick={this.clear} value=\"Clear\"/></Clear>\n            <p>&nbsp;</p>\n        </div>\n    )\n  }\n}\n\nexport default ActionButtons;","import React, { Component } from 'react';\nimport CardList from './components/CardList';\nimport ActionButtons from './components/ActionButtons';\nimport './App.css';\n\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_ENDPOINT }),\n  cache: new InMemoryCache(),\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <img src=\"data:image/png;base64, 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\" className=\"App-logo\" alt=\"logo\" />\n            <h2>\n              <div className=\"tooltip\">Transcriber<span className=\"tooltiptext\">Transcriber <span className=\"underline\">r</span>eproduces <span className=\"underline\">a</span>nalytical, <span className=\"underline\">n</span>eat, similarly-comprehensive reviews, incorporating #bestpractices every rendition</span></div>\n              &nbsp;helps you conduct different types of reviews and audits<br/>and is powered by content from this <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.getguru.com/boards/yiKXnGpi/Transcriber\">Guru board</a>&nbsp;&nbsp;&nbsp;<span className=\"version\">v0.1.3</span></h2>\n          </div>\n          <div className=\"App-User\">\n            <CardList />\n          </div>\n          <ActionButtons />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'reset-css/reset.css';\nimport './index.css';\nimport App from './App';\n\nwindow.jsonForGoogleApps = {customer: \"\", \"cards\": {}};\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}